// <auto-generated />
using System;
using AgAmuasiBooking.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AgAmuasiBooking.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251020093131_Booker4")]
    partial class Booker4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AgAmuasiBooking.Context.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("accessfailedcount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("emailconfirmed");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("fullname");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockoutenabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockoutend");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("normalizedemail");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("normalizedusername");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(168)
                        .HasColumnType("character varying(168)")
                        .HasColumnName("passwordhash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("phonenumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phonenumberconfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("securitystamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("twofactorenabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_aspnetusers");

                    b.HasAlternateKey("UserName")
                        .HasName("ak_aspnetusers_username");

                    b.HasIndex("NormalizedEmail");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique();

                    b.HasIndex("UserName");

                    b.ToTable("aspnetusers", (string)null);
                });

            modelBuilder.Entity("AgAmuasiBooking.Models.BookingServices", b =>
                {
                    b.Property<int>("BookingServicesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("bookingservicesid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookingServicesID"));

                    b.Property<Guid>("BookingsID")
                        .HasColumnType("uuid")
                        .HasColumnName("bookingsid");

                    b.Property<int>("ServiceCostsID")
                        .HasColumnType("integer")
                        .HasColumnName("servicecostsid");

                    b.HasKey("BookingServicesID")
                        .HasName("pk_bookingservices");

                    b.HasIndex("BookingsID", "ServiceCostsID");

                    b.HasIndex("ServiceCostsID", "BookingsID");

                    b.ToTable("bookingservices", (string)null);
                });

            modelBuilder.Entity("AgAmuasiBooking.Models.Bookings", b =>
                {
                    b.Property<Guid>("BookingsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("bookingsid");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric")
                        .HasColumnName("amountpaid");

                    b.Property<string>("Approver")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("approver");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("bookingdate");

                    b.Property<DateTime?>("DateCancelled")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecancelled");

                    b.PrimitiveCollection<DateTime[]>("Dates")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone[]")
                        .HasColumnName("dates");

                    b.Property<short>("Days")
                        .HasColumnType("smallint")
                        .HasColumnName("days");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<short>("Guests")
                        .HasColumnType("smallint")
                        .HasColumnName("guests");

                    b.Property<bool>("HasPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("haspaid");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("isapproved");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean")
                        .HasColumnName("iscancelled");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean")
                        .HasColumnName("isclosed");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("boolean")
                        .HasColumnName("isreviewed");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paymentdate");

                    b.Property<string>("Purpose")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("purpose");

                    b.Property<string>("Receiver")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("receiver");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revieweddate");

                    b.Property<string>("Reviewer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("reviewer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("username");

                    b.HasKey("BookingsID")
                        .HasName("pk_bookings");

                    b.HasIndex("UserName", "Title");

                    b.ToTable("bookings", (string)null);
                });

            modelBuilder.Entity("AgAmuasiBooking.Models.ServiceCosts", b =>
                {
                    b.Property<int>("ServiceCostsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("servicecostsid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServiceCostsID"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric")
                        .HasColumnName("cost");

                    b.Property<DateTime>("DateSet")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateset");

                    b.Property<int>("ServicesID")
                        .HasColumnType("integer")
                        .HasColumnName("servicesid");

                    b.HasKey("ServiceCostsID")
                        .HasName("pk_servicecosts");

                    b.HasIndex("ServicesID");

                    b.ToTable("servicecosts", (string)null);

                    b.HasData(
                        new
                        {
                            ServiceCostsID = 1,
                            Cost = 500.00m,
                            DateSet = new DateTime(2025, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServicesID = 1
                        },
                        new
                        {
                            ServiceCostsID = 2,
                            Cost = 300.00m,
                            DateSet = new DateTime(2025, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServicesID = 2
                        },
                        new
                        {
                            ServiceCostsID = 3,
                            Cost = 400.00m,
                            DateSet = new DateTime(2025, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServicesID = 3
                        },
                        new
                        {
                            ServiceCostsID = 4,
                            Cost = 150.00m,
                            DateSet = new DateTime(2025, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServicesID = 4
                        });
                });

            modelBuilder.Entity("AgAmuasiBooking.Models.Services", b =>
                {
                    b.Property<int>("ServicesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("servicesid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServicesID"));

                    b.Property<bool>("PerPerson")
                        .HasColumnType("boolean")
                        .HasColumnName("perperson");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("servicename");

                    b.HasKey("ServicesID")
                        .HasName("pk_services");

                    b.HasIndex("ServiceName")
                        .IsUnique();

                    b.ToTable("services", (string)null);

                    b.HasData(
                        new
                        {
                            ServicesID = 1,
                            PerPerson = false,
                            ServiceName = "Catering"
                        },
                        new
                        {
                            ServicesID = 2,
                            PerPerson = false,
                            ServiceName = "Decoration"
                        },
                        new
                        {
                            ServicesID = 3,
                            PerPerson = false,
                            ServiceName = "Photography"
                        },
                        new
                        {
                            ServicesID = 4,
                            PerPerson = false,
                            ServiceName = "Internet"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("Name")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("normalizedname");

                    b.HasKey("Id")
                        .HasName("pk_aspnetroles");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.ToTable("aspnetroles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("claimvalue");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("roleid");

                    b.HasKey("Id")
                        .HasName("pk_aspnetroleclaims");

                    b.HasIndex("RoleId");

                    b.ToTable("aspnetroleclaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("claimvalue");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_aspnetuserclaims");

                    b.HasIndex("UserId");

                    b.ToTable("aspnetuserclaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("loginprovider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("providerkey");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("providerdisplayname");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_aspnetuserlogins");

                    b.HasIndex("UserId");

                    b.ToTable("aspnetuserlogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("roleid");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_aspnetuserroles");

                    b.HasIndex("RoleId");

                    b.ToTable("aspnetuserroles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("loginprovider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_aspnetusertokens");

                    b.ToTable("aspnetusertokens", (string)null);
                });

            modelBuilder.Entity("AgAmuasiBooking.Models.BookingServices", b =>
                {
                    b.HasOne("AgAmuasiBooking.Models.Bookings", "Booking")
                        .WithMany("BookingServices")
                        .HasForeignKey("BookingsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bookingservices_bookings_bookingsid");

                    b.HasOne("AgAmuasiBooking.Models.ServiceCosts", "ServiceCosts")
                        .WithMany()
                        .HasForeignKey("ServiceCostsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bookingservices_servicecosts_servicecostsid");

                    b.Navigation("Booking");

                    b.Navigation("ServiceCosts");
                });

            modelBuilder.Entity("AgAmuasiBooking.Models.ServiceCosts", b =>
                {
                    b.HasOne("AgAmuasiBooking.Models.Services", "Service")
                        .WithMany("ServiceCosts")
                        .HasForeignKey("ServicesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_servicecosts_services_servicesid");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetroleclaims_aspnetroles_roleid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("AgAmuasiBooking.Context.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserclaims_aspnetusers_userid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("AgAmuasiBooking.Context.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserlogins_aspnetusers_userid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserroles_aspnetroles_roleid");

                    b.HasOne("AgAmuasiBooking.Context.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserroles_aspnetusers_userid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("AgAmuasiBooking.Context.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetusertokens_aspnetusers_userid");
                });

            modelBuilder.Entity("AgAmuasiBooking.Models.Bookings", b =>
                {
                    b.Navigation("BookingServices");
                });

            modelBuilder.Entity("AgAmuasiBooking.Models.Services", b =>
                {
                    b.Navigation("ServiceCosts");
                });
#pragma warning restore 612, 618
        }
    }
}
